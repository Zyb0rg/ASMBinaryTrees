Title AsmTrees
INCLUDE irvine32.inc

.data
Heap dword 100 DUP("x")
Enter1 byte "Enter a node: ",0
Displaying byte "LevelWise Tree: ",0
minimum byte "Mininum: ",0
maximum byte "Maximum: ",0
size1 byte "Size of the Tree: ",0
Bfirst byte "BreadthFirst Traversal: ",0
Dfirst byte "DepthFirst Traversal: ",0
Spaces byte "  ",0
pre byte "Preorder Traversal: ",0
post byte "Postorder Traversal: ",0
inor byte "Inorder Traversal: ",0
InsertCounter1 dword 0
mi dword 100000h
mx dword 0

.code

BtreeInsert PROTO
DisplayLevelWise PROTO
TreeSize PROTO
Min PROTO
MAX PROTO
BreadthFirstSearch PROTO
DepthFirstSearch PROTO
DisplayPreOrder PROTO
DisplayPostOrder PROTO
DisplayInOrder PROTO
InOrder PROTO,counter1:DWORD, NodeCounter1:DWORD
PostOrder PROTO,counter2:DWORD, NodeCounter2:DWORD
PreOrder PROTO,counter3:DWORD, NodeCounter3:DWORD
CalculateDepthFirst PROTO,counter4:DWORD, NodeCounter4:DWORD

main PROC

INVOKE BtreeInsert
INVOKE BtreeInsert
INVOKE BtreeInsert
INVOKE BtreeInsert
INVOKE BtreeInsert
INVOKE BtreeInsert
INVOKE BtreeInsert

INVOKE TreeSize
INVOKE Min
INVOKE Max
INVOKE DisplayLevelWise
INVOKE DepthFirstSearch
INVOKE BreadthFirstSearch
INVOKE DisplayPreOrder
INVOKE DisplayPostOrder
INVOKE DisplayInOrder

EXIT
main ENDP




DisplayPreOrder PROC
push ebp
call crlf
mov edx,OFFSET pre
call writestring
Invoke PreOrder,0, InsertCounter1
call crlf
call crlf
pop ebp
ret
DisplayPreOrder ENDP




DisplayPostOrder PROC
push ebp
call crlf
mov edx,OFFSET post
call writestring
Invoke PostOrder,0, InsertCounter1
call crlf
call crlf
pop ebp
ret
DisplayPostOrder ENDP





DisplayInOrder PROC
push ebp
call crlf
mov edx,OFFSET inor
call writestring
Invoke InOrder,0, InsertCounter1
call crlf
call crlf
pop ebp
ret
DisplayInOrder ENDP





DepthFirstSearch PROC
push ebp
call crlf
mov edx,OFFSET Dfirst
call writestring
Invoke CalculateDepthFirst,0, InsertCounter1
call crlf
call crlf
pop ebp
ret
DepthFirstSearch ENDP





BtreeInsert PROC
push ebp
mov edx, offset Enter1
call writestring
call crlf
call readint
mov esi, offset heap
mov ecx, InsertCounter1
L1:
	add esi, type heap
Loop L1
mov [esi], eax
inc InsertCounter1
pop ebp
ret
BtreeInsert ENDP




DisplayLevelWise PROC
push ebp
call crlf
mov edx, offset Displaying
call writestring
mov esi, offset heap
mov ecx, InsertCounter1
L1:
	mov eax, [esi]
	call writedec
	mov edx, offset Spaces
	call writestring
	add esi, type Heap
Loop L1
call crlf
call crlf
pop ebp
ret
DisplayLevelWise ENDP





Min PROC
push ebp
call crlf
mov ecx, InsertCounter1
mov esi, offset Heap
L1:
	mov eax, mi
	cmp [esi], eax
	jae J1
		mov eax, [esi]
		mov mi, eax
	J1:
	add esi, type heap
Loop L1
mov eax, mi
mov edx, offset minimum
call writestring
call writedec
call crlf
call crlf
pop ebp
ret
Min ENDP






Max PROC
push ebp
call crlf
mov ecx, InsertCounter1
mov esi, offset Heap
L1:
	mov eax, mx
	cmp [esi], eax
	jbe J1
		mov eax, [esi]
		mov mx, eax
	J1:
	add esi, type heap
Loop L1
mov eax, mx
mov edx, offset maximum
call writestring
call writedec
call crlf
call crlf
pop ebp
ret
Max ENDP





BreadthFirstSearch PROC
push ebp
call crlf
mov edx, offset bfirst
call writestring
mov esi, offset heap
mov ecx, InsertCounter1
L1:
	mov eax, [esi]
	call writedec
	mov edx, offset Spaces
	call writestring
	add esi, type Heap
Loop L1
call crlf
call crlf
pop ebp
ret
BreadthFirstSearch ENDP





InOrder PROC,counter1:DWORD, NodeCounter1:DWORD
push ebp
mov eax,counter1
cmp eax, NodeCounter1
jb j1
pop ebp
ret 8

j1:

mov eax,counter1
mov ebx,2
mul ebx
add eax,1
mov counter1,eax

Invoke InOrder,counter1,NodeCounter1
dec counter1
mov eax,counter1
mov edx,0
mov ebx,2
div ebx
mov counter1,eax
mov esi,counter1
mov eax,Heap[esi*Type Heap]
call writedec
mov edx,OFFSET spaces
call writestring
mov eax,counter1
mul ebx
add eax,2
mov counter1,eax

Invoke InOrder,counter1,NodeCounter1
sub counter1,2
mov eax,counter1
mov edx,0
mov ebx,2
div ebx
mov counter1,eax
pop ebp
ret 8
InOrder ENDP





PostOrder PROC,counter2:DWORD, NodeCounter2:DWORD
push ebp
mov eax,counter2
cmp eax, NodeCounter2
jb j1
pop ebp
ret 8

j1:

mov eax,counter2
mov ebx,2
mul ebx
add eax,1
mov counter2,eax

Invoke PostOrder,counter2,NodeCounter2
inc counter2

Invoke PostOrder,counter2,NodeCounter2
sub counter2,2
mov eax,counter2
mov edx,0
mov ebx,2
div ebx
mov counter2,eax

mov esi,counter2
mov eax,Heap[esi*Type Heap]
call writedec
mov edx,OFFSET spaces
call writestring

pop ebp
ret 8
PostOrder ENDP





PreOrder PROC,counter3:DWORD, NodeCounter3:DWORD
push ebp
mov eax,counter3
cmp eax, NodeCounter3
jb j1
pop ebp
ret 8

j1:
mov esi,counter3
mov eax,Heap[esi*Type Heap]
call writedec
mov edx,OFFSET spaces
call writestring

mov eax,counter3
mov ebx,2
mul ebx
add eax,1
mov counter3,eax

Invoke PreOrder,counter3,NodeCounter3
inc counter3

Invoke PreOrder,counter3,NodeCounter3
sub counter3,2
mov eax,counter3
mov edx,0
mov ebx,2
div ebx
mov counter3,eax

pop ebp
ret 8
PreOrder ENDP




TreeSize PROC
push ebp
mov ecx, insertCounter1
mov eax, 0
L1:
	inc eax
Loop L1
mov edx, offset size1
call crlf
call writestring
call writedec
call crlf
call crlf
pop ebp
ret
TreeSize ENDP




CalculateDepthFirst PROC,counter4:DWORD, NodeCounter4:DWORD
push ebp
mov eax,counter4
cmp eax, NodeCounter4
jb j1
pop ebp
ret 8

j1:

mov eax,counter4
mov ebx,2
mul ebx
add eax,1
mov counter4,eax

Invoke CalculateDepthFirst,counter4,NodeCounter4
inc counter4

Invoke CalculateDepthFirst,counter4,NodeCounter4
sub counter4,2
mov eax,counter4
mov edx,0
mov ebx,2
div ebx
mov counter4,eax

mov esi,counter4
mov eax,Heap[esi*Type Heap]
call writedec
mov edx,OFFSET spaces
call writestring

pop ebp
ret 8
CalculateDepthFirst ENDP




END main