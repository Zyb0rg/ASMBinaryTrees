Title AsmTrees
INCLUDE irvine32.inc

.data
Heap dword 100 DUP('z')
Enter1 byte "Enter a node: ",0
Displaying byte "LevelWise Tree: ",0
minimum byte "Mininum: ",0
maximum byte "Maximum: ",0
size1 byte "Size of the Tree: ",0
Bfirst byte "BreadthFirst Traversal: ",0
Dfirst byte "DepthFirst Traversal: ",0
Spaces byte "  ",0
pre byte "Preorder Traversal: ",0
post byte "Postorder Traversal: ",0
inor byte "Inorder Traversal: ",0
InsertCounter1 dword 0
mi dword 100000h
mx dword 0

.code

BtreeInsert PROTO
bstInsert PROTO,counter:DWORD, data:DWORD
DisplayLevelWise PROTO
TreeSize PROTO
Min PROTO
MAX PROTO
BreadthFirstSearch PROTO
DepthFirstSearch PROTO
DisplayPreOrder PROTO
DisplayPostOrder PROTO
DisplayInOrder PROTO
InOrder PROTO,counter1:DWORD
PostOrder PROTO,counter2:DWORD
PreOrder PROTO,counter3:DWORD
CalculateDepthFirst PROTO,counter4:DWORD
bstMax PROTO, counter5:DWORD
bstMin PROTO, counter6:DWORD



main PROC

INVOKE bstInsert, 0 , 8
INVOKE bstInsert, 0 , 6
INVOKE bstInsert, 0 , 11
INVOKE bstInsert, 0 , 2
INVOKE bstInsert, 0 , 7
INVOKE bstInsert, 0 , 10
INVOKE bstInsert, 0 , 15
INVOKE bstInsert, 0 , 90

;INVOKE BtreeInsert
;INVOKE BtreeInsert
;INVOKE BtreeInsert
;INVOKE BtreeInsert
;INVOKE BtreeInsert
;INVOKE BtreeInsert
;INVOKE BtreeInsert




;INVOKE TreeSize
INVOKE bstMin,0
INVOKE bstMax, 0
;INVOKE DisplayLevelWise
INVOKE DepthFirstSearch
INVOKE BreadthFirstSearch
INVOKE DisplayPreOrder
INVOKE DisplayPostOrder
INVOKE DisplayInOrder

EXIT
main ENDP




DisplayPreOrder PROC
push ebp
call crlf
mov edx,OFFSET pre
call writestring
Invoke PreOrder,0
call crlf
call crlf
pop ebp
ret
DisplayPreOrder ENDP




DisplayPostOrder PROC
push ebp
call crlf
mov edx,OFFSET post
call writestring
Invoke PostOrder,0
call crlf
call crlf
pop ebp
ret
DisplayPostOrder ENDP





DisplayInOrder PROC
push ebp
call crlf
mov edx,OFFSET inor
call writestring
Invoke InOrder,0
call crlf
call crlf
pop ebp
ret
DisplayInOrder ENDP





DepthFirstSearch PROC
push ebp
call crlf
mov edx,OFFSET Dfirst
call writestring
Invoke CalculateDepthFirst,0
call crlf
call crlf
pop ebp
ret
DepthFirstSearch ENDP





BtreeInsert PROC
push ebp
mov edx, offset Enter1
call writestring
call crlf
call readint
mov esi, offset heap
mov ecx, InsertCounter1
L1:
	add esi, type heap
Loop L1
mov [esi], eax
inc InsertCounter1
pop ebp
ret
BtreeInsert ENDP




bstInsert PROC,counter:DWORD, data:DWORD
push ebp
mov eax,counter
cmp Heap[eax*TYPE DWORD],'z'

jne j1

mov ebx,data
mov Heap[eax*TYPE DWORD],ebx
pop ebp

ret 8

j1:

mov ebx,data
cmp ebx,Heap[eax*TYPE DWORD]

jb j2
mov eax,counter
mov ebx,2
mul ebx
add eax,2
mov counter,eax
Invoke bstInsert, counter, data
pop ebp

ret 8

j2:
mov eax,counter
mov ebx,2
mul ebx
add eax,1
mov counter,eax
Invoke bstInsert, counter, data
pop ebp

ret 8

bstInsert ENDP




DisplayLevelWise PROC
push ebp
call crlf
mov edx, offset Displaying
call writestring
mov esi, offset heap
mov ebx,0
mov ecx, LENGTHOF heap
L1:
	mov eax, [esi]
	cmp Heap[ebx*TYPE Heap],'z'
	je j1
	call writedec
	mov edx, offset Spaces
	call writestring
	j1:
	add esi, type Heap
	inc ebx
Loop L1
call crlf
call crlf
pop ebp
ret
DisplayLevelWise ENDP





Min PROC
push ebp
call crlf
mov ecx, InsertCounter1
mov esi, offset Heap
L1:
	mov eax, mi
	cmp [esi], eax
	jae J1
		mov eax, [esi]
		mov mi, eax
	J1:
	add esi, type heap
Loop L1
mov eax, mi
mov edx, offset minimum
call writestring
call writedec
call crlf
call crlf
pop ebp
ret
Min ENDP






Max PROC
push ebp
call crlf
mov ecx, InsertCounter1
mov esi, offset Heap
L1:
	mov eax, mx
	cmp [esi], eax
	jbe J1
		mov eax, [esi]
		mov mx, eax
	J1:
	add esi, type heap
Loop L1
mov eax, mx
mov edx, offset maximum
call writestring
call writedec
call crlf
call crlf
pop ebp
ret
Max ENDP





BreadthFirstSearch PROC
push ebp
call crlf
mov edx, offset Displaying
call writestring
mov esi, offset heap
mov ebx,0
mov ecx, LENGTHOF heap
L1:
	mov eax, [esi]
	cmp Heap[ebx*TYPE Heap],'z'
	je j1
	call writedec
	mov edx, offset Spaces
	call writestring
	j1:
	add esi, type Heap
	inc ebx
Loop L1
call crlf
call crlf
pop ebp
ret
BreadthFirstSearch ENDP





InOrder PROC,counter1:DWORD
push ebp
mov eax,counter1
cmp Heap[eax*Type DWORD],'z'
jne j1
pop ebp
ret 4

j1:

mov eax,counter1
mov ebx,2
mul ebx
add eax,1
mov counter1,eax

Invoke InOrder,counter1
dec counter1
mov eax,counter1
mov edx,0
mov ebx,2
div ebx
mov counter1,eax
mov esi,counter1
mov eax,Heap[esi*Type Heap]
call writedec
mov edx,OFFSET spaces
call writestring
mov eax,counter1
mul ebx
add eax,2
mov counter1,eax

Invoke InOrder,counter1
sub counter1,2
mov eax,counter1
mov edx,0
mov ebx,2
div ebx
mov counter1,eax
pop ebp
ret 4
InOrder ENDP





PostOrder PROC,counter2:DWORD
push ebp
mov eax,counter2
cmp Heap[eax*Type DWORD],'z'
jne j1
pop ebp
ret 4

j1:

mov eax,counter2
mov ebx,2
mul ebx
add eax,1
mov counter2,eax

Invoke PostOrder,counter2
inc counter2

Invoke PostOrder,counter2
sub counter2,2
mov eax,counter2
mov edx,0
mov ebx,2
div ebx
mov counter2,eax

mov esi,counter2
mov eax,Heap[esi*Type Heap]
call writedec
mov edx,OFFSET spaces
call writestring

pop ebp
ret 4
PostOrder ENDP





PreOrder PROC,counter3:DWORD
push ebp
mov eax,counter3
cmp Heap[eax*Type DWORD],'z'
jne j1
pop ebp
ret 4

j1:
mov esi,counter3
mov eax,Heap[esi*Type Heap]
call writedec
mov edx,OFFSET spaces
call writestring

mov eax,counter3
mov ebx,2
mul ebx
add eax,1
mov counter3,eax

Invoke PreOrder,counter3
inc counter3

Invoke PreOrder,counter3
sub counter3,2
mov eax,counter3
mov edx,0
mov ebx,2
div ebx
mov counter3,eax

pop ebp
ret 4
PreOrder ENDP




TreeSize PROC
push ebp
mov ecx, insertCounter1
mov eax, 0
L1:
	inc eax
Loop L1
mov edx, offset size1
call crlf
call writestring
call writedec
call crlf
call crlf
pop ebp
ret
TreeSize ENDP




CalculateDepthFirst PROC,counter4:DWORD
push ebp
mov eax,counter4
cmp Heap[eax*Type DWORD],'z'
jne j1
pop ebp
ret 4

j1:

mov eax,counter4
mov ebx,2
mul ebx
add eax,1
mov counter4,eax

Invoke CalculateDepthFirst,counter4
inc counter4

Invoke CalculateDepthFirst,counter4
sub counter4,2
mov eax,counter4
mov edx,0
mov ebx,2
div ebx
mov counter4,eax

mov esi,counter4
mov eax,Heap[esi*Type Heap]
call writedec
mov edx,OFFSET spaces
call writestring

pop ebp
ret 4
CalculateDepthFirst ENDP




bstMax PROC, counter5:DWORD
push ebp
mov eax,counter5

cmp Heap[eax*Type Heap],'z'

jne j1
pop ebp
ret 4

j1:
mov eax,counter5
mov ebx,2
mul ebx
add eax,2

cmp Heap[eax*Type Heap],'z'

jne j2
mov edx, OFFSET maximum
call writestring

mov ebx,counter5
mov eax,Heap[ebx*Type Heap]
call writedec
mov mx,eax
call crlf
call crlf
pop ebp

ret 4

j2:
mov eax,counter5
mov ebx,2
mul ebx
add eax,2
mov counter5,eax
Invoke bstMax, counter5

pop ebp

ret 4

bstMax ENDP




bstMin PROC, counter6:DWORD
push ebp
mov eax,counter6
cmp Heap[eax*Type Heap],'z'

jne j1
pop ebp
ret 4

j1:
mov eax,counter6
mov ebx,2
mul ebx
add eax,1

cmp Heap[eax*Type Heap],'z'
jne j2

mov edx, OFFSET minimum
call writestring

mov ebx,counter6
mov eax,Heap[ebx*Type Heap]
call writedec
mov mi,eax
call crlf
call crlf
pop ebp

ret 4

j2:
mov eax,counter6
mov ebx,2
mul ebx
add eax,1
mov counter6,eax
Invoke bstMin, counter6

pop ebp

ret 4
bstMin ENDP


END main